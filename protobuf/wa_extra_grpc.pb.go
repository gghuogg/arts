// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.5.0
// source: wa_extra.protobuf

package protobuf

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	XmppStream_Connect_FullMethodName = "/XmppStream/connect"
)

// XmppStreamClient is the client API for XmppStream service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type XmppStreamClient interface {
	Connect(ctx context.Context, opts ...grpc.CallOption) (XmppStream_ConnectClient, error)
}

type xmppStreamClient struct {
	cc grpc.ClientConnInterface
}

func NewXmppStreamClient(cc grpc.ClientConnInterface) XmppStreamClient {
	return &xmppStreamClient{cc}
}

func (c *xmppStreamClient) Connect(ctx context.Context, opts ...grpc.CallOption) (XmppStream_ConnectClient, error) {
	stream, err := c.cc.NewStream(ctx, &XmppStream_ServiceDesc.Streams[0], XmppStream_Connect_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &xmppStreamConnectClient{stream}
	return x, nil
}

type XmppStream_ConnectClient interface {
	Send(*XmppStanzaElement) error
	Recv() (*XmppStanzaElement, error)
	grpc.ClientStream
}

type xmppStreamConnectClient struct {
	grpc.ClientStream
}

func (x *xmppStreamConnectClient) Send(m *XmppStanzaElement) error {
	return x.ClientStream.SendMsg(m)
}

func (x *xmppStreamConnectClient) Recv() (*XmppStanzaElement, error) {
	m := new(XmppStanzaElement)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// XmppStreamServer is the server API for XmppStream service.
// All implementations must embed UnimplementedXmppStreamServer
// for forward compatibility
type XmppStreamServer interface {
	Connect(XmppStream_ConnectServer) error
	mustEmbedUnimplementedXmppStreamServer()
}

// UnimplementedXmppStreamServer must be embedded to have forward compatible implementations.
type UnimplementedXmppStreamServer struct {
}

func (UnimplementedXmppStreamServer) Connect(XmppStream_ConnectServer) error {
	return status.Errorf(codes.Unimplemented, "method Connect not implemented")
}
func (UnimplementedXmppStreamServer) mustEmbedUnimplementedXmppStreamServer() {}

// UnsafeXmppStreamServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to XmppStreamServer will
// result in compilation errors.
type UnsafeXmppStreamServer interface {
	mustEmbedUnimplementedXmppStreamServer()
}

func RegisterXmppStreamServer(s grpc.ServiceRegistrar, srv XmppStreamServer) {
	s.RegisterService(&XmppStream_ServiceDesc, srv)
}

func _XmppStream_Connect_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(XmppStreamServer).Connect(&xmppStreamConnectServer{stream})
}

type XmppStream_ConnectServer interface {
	Send(*XmppStanzaElement) error
	Recv() (*XmppStanzaElement, error)
	grpc.ServerStream
}

type xmppStreamConnectServer struct {
	grpc.ServerStream
}

func (x *xmppStreamConnectServer) Send(m *XmppStanzaElement) error {
	return x.ServerStream.SendMsg(m)
}

func (x *xmppStreamConnectServer) Recv() (*XmppStanzaElement, error) {
	m := new(XmppStanzaElement)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// XmppStream_ServiceDesc is the grpc.ServiceDesc for XmppStream service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var XmppStream_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "XmppStream",
	HandlerType: (*XmppStreamServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "connect",
			Handler:       _XmppStream_Connect_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "wa_extra.protobuf",
}
