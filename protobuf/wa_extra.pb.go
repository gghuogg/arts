// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.5.0
// source: wa_extra.protobuf

package protobuf

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type XmppValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//
	//	*XmppValue_String_
	//	*XmppValue_Data
	Value isXmppValue_Value `protobuf_oneof:"value"`
}

func (x *XmppValue) Reset() {
	*x = XmppValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wa_extra_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *XmppValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*XmppValue) ProtoMessage() {}

func (x *XmppValue) ProtoReflect() protoreflect.Message {
	mi := &file_wa_extra_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use XmppValue.ProtoReflect.Descriptor instead.
func (*XmppValue) Descriptor() ([]byte, []int) {
	return file_wa_extra_proto_rawDescGZIP(), []int{0}
}

func (m *XmppValue) GetValue() isXmppValue_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *XmppValue) GetString_() string {
	if x, ok := x.GetValue().(*XmppValue_String_); ok {
		return x.String_
	}
	return ""
}

func (x *XmppValue) GetData() []byte {
	if x, ok := x.GetValue().(*XmppValue_Data); ok {
		return x.Data
	}
	return nil
}

type isXmppValue_Value interface {
	isXmppValue_Value()
}

type XmppValue_String_ struct {
	String_ string `protobuf:"bytes,1,opt,name=string,oneof"`
}

type XmppValue_Data struct {
	Data []byte `protobuf:"bytes,2,opt,name=data,oneof"`
}

func (*XmppValue_String_) isXmppValue_Value() {}

func (*XmppValue_Data) isXmppValue_Value() {}

type XmppAttributeValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//
	//	*XmppAttributeValue_String_
	//	*XmppAttributeValue_Data
	//	*XmppAttributeValue_WADomainJID
	//	*XmppAttributeValue_WACallDomainJID
	//	*XmppAttributeValue_WAIdentifierJID
	//	*XmppAttributeValue_WAChatJID
	//	*XmppAttributeValue_WABroadcastJID
	//	*XmppAttributeValue_WANewsletterJID
	//	*XmppAttributeValue_WAGroupJID
	//	*XmppAttributeValue_WAUserJID
	//	*XmppAttributeValue_WAPhoneNumberUserJID
	//	*XmppAttributeValue_WALIDUserJID
	//	*XmppAttributeValue_WAIncomingStatusJID
	//	*XmppAttributeValue_WASignalUniqueBroadcastJID
	//	*XmppAttributeValue_WADeviceJID
	//	*XmppAttributeValue_WAPhoneNumberDeviceJID
	//	*XmppAttributeValue_WALIDDeviceJID
	//	*XmppAttributeValue_WALocationJID
	//	*XmppAttributeValue_WAPhoneNumberLocationJID
	//	*XmppAttributeValue_WALIDLocationJID
	//	*XmppAttributeValue_WAGroupCallJID
	Value isXmppAttributeValue_Value `protobuf_oneof:"value"`
}

func (x *XmppAttributeValue) Reset() {
	*x = XmppAttributeValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wa_extra_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *XmppAttributeValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*XmppAttributeValue) ProtoMessage() {}

func (x *XmppAttributeValue) ProtoReflect() protoreflect.Message {
	mi := &file_wa_extra_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use XmppAttributeValue.ProtoReflect.Descriptor instead.
func (*XmppAttributeValue) Descriptor() ([]byte, []int) {
	return file_wa_extra_proto_rawDescGZIP(), []int{1}
}

func (m *XmppAttributeValue) GetValue() isXmppAttributeValue_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *XmppAttributeValue) GetString_() string {
	if x, ok := x.GetValue().(*XmppAttributeValue_String_); ok {
		return x.String_
	}
	return ""
}

func (x *XmppAttributeValue) GetData() []byte {
	if x, ok := x.GetValue().(*XmppAttributeValue_Data); ok {
		return x.Data
	}
	return nil
}

func (x *XmppAttributeValue) GetWADomainJID() string {
	if x, ok := x.GetValue().(*XmppAttributeValue_WADomainJID); ok {
		return x.WADomainJID
	}
	return ""
}

func (x *XmppAttributeValue) GetWACallDomainJID() string {
	if x, ok := x.GetValue().(*XmppAttributeValue_WACallDomainJID); ok {
		return x.WACallDomainJID
	}
	return ""
}

func (x *XmppAttributeValue) GetWAIdentifierJID() string {
	if x, ok := x.GetValue().(*XmppAttributeValue_WAIdentifierJID); ok {
		return x.WAIdentifierJID
	}
	return ""
}

func (x *XmppAttributeValue) GetWAChatJID() string {
	if x, ok := x.GetValue().(*XmppAttributeValue_WAChatJID); ok {
		return x.WAChatJID
	}
	return ""
}

func (x *XmppAttributeValue) GetWABroadcastJID() string {
	if x, ok := x.GetValue().(*XmppAttributeValue_WABroadcastJID); ok {
		return x.WABroadcastJID
	}
	return ""
}

func (x *XmppAttributeValue) GetWANewsletterJID() string {
	if x, ok := x.GetValue().(*XmppAttributeValue_WANewsletterJID); ok {
		return x.WANewsletterJID
	}
	return ""
}

func (x *XmppAttributeValue) GetWAGroupJID() string {
	if x, ok := x.GetValue().(*XmppAttributeValue_WAGroupJID); ok {
		return x.WAGroupJID
	}
	return ""
}

func (x *XmppAttributeValue) GetWAUserJID() string {
	if x, ok := x.GetValue().(*XmppAttributeValue_WAUserJID); ok {
		return x.WAUserJID
	}
	return ""
}

func (x *XmppAttributeValue) GetWAPhoneNumberUserJID() string {
	if x, ok := x.GetValue().(*XmppAttributeValue_WAPhoneNumberUserJID); ok {
		return x.WAPhoneNumberUserJID
	}
	return ""
}

func (x *XmppAttributeValue) GetWALIDUserJID() string {
	if x, ok := x.GetValue().(*XmppAttributeValue_WALIDUserJID); ok {
		return x.WALIDUserJID
	}
	return ""
}

func (x *XmppAttributeValue) GetWAIncomingStatusJID() string {
	if x, ok := x.GetValue().(*XmppAttributeValue_WAIncomingStatusJID); ok {
		return x.WAIncomingStatusJID
	}
	return ""
}

func (x *XmppAttributeValue) GetWASignalUniqueBroadcastJID() string {
	if x, ok := x.GetValue().(*XmppAttributeValue_WASignalUniqueBroadcastJID); ok {
		return x.WASignalUniqueBroadcastJID
	}
	return ""
}

func (x *XmppAttributeValue) GetWADeviceJID() string {
	if x, ok := x.GetValue().(*XmppAttributeValue_WADeviceJID); ok {
		return x.WADeviceJID
	}
	return ""
}

func (x *XmppAttributeValue) GetWAPhoneNumberDeviceJID() string {
	if x, ok := x.GetValue().(*XmppAttributeValue_WAPhoneNumberDeviceJID); ok {
		return x.WAPhoneNumberDeviceJID
	}
	return ""
}

func (x *XmppAttributeValue) GetWALIDDeviceJID() string {
	if x, ok := x.GetValue().(*XmppAttributeValue_WALIDDeviceJID); ok {
		return x.WALIDDeviceJID
	}
	return ""
}

func (x *XmppAttributeValue) GetWALocationJID() string {
	if x, ok := x.GetValue().(*XmppAttributeValue_WALocationJID); ok {
		return x.WALocationJID
	}
	return ""
}

func (x *XmppAttributeValue) GetWAPhoneNumberLocationJID() string {
	if x, ok := x.GetValue().(*XmppAttributeValue_WAPhoneNumberLocationJID); ok {
		return x.WAPhoneNumberLocationJID
	}
	return ""
}

func (x *XmppAttributeValue) GetWALIDLocationJID() string {
	if x, ok := x.GetValue().(*XmppAttributeValue_WALIDLocationJID); ok {
		return x.WALIDLocationJID
	}
	return ""
}

func (x *XmppAttributeValue) GetWAGroupCallJID() string {
	if x, ok := x.GetValue().(*XmppAttributeValue_WAGroupCallJID); ok {
		return x.WAGroupCallJID
	}
	return ""
}

type isXmppAttributeValue_Value interface {
	isXmppAttributeValue_Value()
}

type XmppAttributeValue_String_ struct {
	String_ string `protobuf:"bytes,1,opt,name=string,oneof"`
}

type XmppAttributeValue_Data struct {
	Data []byte `protobuf:"bytes,2,opt,name=data,oneof"`
}

type XmppAttributeValue_WADomainJID struct {
	WADomainJID string `protobuf:"bytes,11,opt,name=WADomainJID,oneof"`
}

type XmppAttributeValue_WACallDomainJID struct {
	WACallDomainJID string `protobuf:"bytes,12,opt,name=WACallDomainJID,oneof"`
}

type XmppAttributeValue_WAIdentifierJID struct {
	WAIdentifierJID string `protobuf:"bytes,13,opt,name=WAIdentifierJID,oneof"`
}

type XmppAttributeValue_WAChatJID struct {
	WAChatJID string `protobuf:"bytes,14,opt,name=WAChatJID,oneof"`
}

type XmppAttributeValue_WABroadcastJID struct {
	WABroadcastJID string `protobuf:"bytes,15,opt,name=WABroadcastJID,oneof"`
}

type XmppAttributeValue_WANewsletterJID struct {
	WANewsletterJID string `protobuf:"bytes,16,opt,name=WANewsletterJID,oneof"`
}

type XmppAttributeValue_WAGroupJID struct {
	WAGroupJID string `protobuf:"bytes,17,opt,name=WAGroupJID,oneof"`
}

type XmppAttributeValue_WAUserJID struct {
	WAUserJID string `protobuf:"bytes,18,opt,name=WAUserJID,oneof"`
}

type XmppAttributeValue_WAPhoneNumberUserJID struct {
	WAPhoneNumberUserJID string `protobuf:"bytes,19,opt,name=WAPhoneNumberUserJID,oneof"`
}

type XmppAttributeValue_WALIDUserJID struct {
	WALIDUserJID string `protobuf:"bytes,20,opt,name=WALIDUserJID,oneof"`
}

type XmppAttributeValue_WAIncomingStatusJID struct {
	WAIncomingStatusJID string `protobuf:"bytes,21,opt,name=WAIncomingStatusJID,oneof"`
}

type XmppAttributeValue_WASignalUniqueBroadcastJID struct {
	WASignalUniqueBroadcastJID string `protobuf:"bytes,22,opt,name=WASignalUniqueBroadcastJID,oneof"`
}

type XmppAttributeValue_WADeviceJID struct {
	WADeviceJID string `protobuf:"bytes,23,opt,name=WADeviceJID,oneof"`
}

type XmppAttributeValue_WAPhoneNumberDeviceJID struct {
	WAPhoneNumberDeviceJID string `protobuf:"bytes,24,opt,name=WAPhoneNumberDeviceJID,oneof"`
}

type XmppAttributeValue_WALIDDeviceJID struct {
	WALIDDeviceJID string `protobuf:"bytes,25,opt,name=WALIDDeviceJID,oneof"`
}

type XmppAttributeValue_WALocationJID struct {
	WALocationJID string `protobuf:"bytes,26,opt,name=WALocationJID,oneof"`
}

type XmppAttributeValue_WAPhoneNumberLocationJID struct {
	WAPhoneNumberLocationJID string `protobuf:"bytes,27,opt,name=WAPhoneNumberLocationJID,oneof"`
}

type XmppAttributeValue_WALIDLocationJID struct {
	WALIDLocationJID string `protobuf:"bytes,28,opt,name=WALIDLocationJID,oneof"`
}

type XmppAttributeValue_WAGroupCallJID struct {
	WAGroupCallJID string `protobuf:"bytes,29,opt,name=WAGroupCallJID,oneof"`
}

func (*XmppAttributeValue_String_) isXmppAttributeValue_Value() {}

func (*XmppAttributeValue_Data) isXmppAttributeValue_Value() {}

func (*XmppAttributeValue_WADomainJID) isXmppAttributeValue_Value() {}

func (*XmppAttributeValue_WACallDomainJID) isXmppAttributeValue_Value() {}

func (*XmppAttributeValue_WAIdentifierJID) isXmppAttributeValue_Value() {}

func (*XmppAttributeValue_WAChatJID) isXmppAttributeValue_Value() {}

func (*XmppAttributeValue_WABroadcastJID) isXmppAttributeValue_Value() {}

func (*XmppAttributeValue_WANewsletterJID) isXmppAttributeValue_Value() {}

func (*XmppAttributeValue_WAGroupJID) isXmppAttributeValue_Value() {}

func (*XmppAttributeValue_WAUserJID) isXmppAttributeValue_Value() {}

func (*XmppAttributeValue_WAPhoneNumberUserJID) isXmppAttributeValue_Value() {}

func (*XmppAttributeValue_WALIDUserJID) isXmppAttributeValue_Value() {}

func (*XmppAttributeValue_WAIncomingStatusJID) isXmppAttributeValue_Value() {}

func (*XmppAttributeValue_WASignalUniqueBroadcastJID) isXmppAttributeValue_Value() {}

func (*XmppAttributeValue_WADeviceJID) isXmppAttributeValue_Value() {}

func (*XmppAttributeValue_WAPhoneNumberDeviceJID) isXmppAttributeValue_Value() {}

func (*XmppAttributeValue_WALIDDeviceJID) isXmppAttributeValue_Value() {}

func (*XmppAttributeValue_WALocationJID) isXmppAttributeValue_Value() {}

func (*XmppAttributeValue_WAPhoneNumberLocationJID) isXmppAttributeValue_Value() {}

func (*XmppAttributeValue_WALIDLocationJID) isXmppAttributeValue_Value() {}

func (*XmppAttributeValue_WAGroupCallJID) isXmppAttributeValue_Value() {}

type XmppAttribute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   *string             `protobuf:"bytes,1,req,name=key" json:"key,omitempty"`
	Value *XmppAttributeValue `protobuf:"bytes,2,req,name=value" json:"value,omitempty"`
}

func (x *XmppAttribute) Reset() {
	*x = XmppAttribute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wa_extra_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *XmppAttribute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*XmppAttribute) ProtoMessage() {}

func (x *XmppAttribute) ProtoReflect() protoreflect.Message {
	mi := &file_wa_extra_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use XmppAttribute.ProtoReflect.Descriptor instead.
func (*XmppAttribute) Descriptor() ([]byte, []int) {
	return file_wa_extra_proto_rawDescGZIP(), []int{2}
}

func (x *XmppAttribute) GetKey() string {
	if x != nil && x.Key != nil {
		return *x.Key
	}
	return ""
}

func (x *XmppAttribute) GetValue() *XmppAttributeValue {
	if x != nil {
		return x.Value
	}
	return nil
}

type XmppStanzaElement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name       *string              `protobuf:"bytes,1,req,name=name" json:"name,omitempty"`
	Attributes []*XmppAttribute     `protobuf:"bytes,2,rep,name=attributes" json:"attributes,omitempty"`
	Children   []*XmppStanzaElement `protobuf:"bytes,3,rep,name=children" json:"children,omitempty"`
	Value      *XmppValue           `protobuf:"bytes,4,opt,name=value" json:"value,omitempty"`
}

func (x *XmppStanzaElement) Reset() {
	*x = XmppStanzaElement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wa_extra_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *XmppStanzaElement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*XmppStanzaElement) ProtoMessage() {}

func (x *XmppStanzaElement) ProtoReflect() protoreflect.Message {
	mi := &file_wa_extra_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use XmppStanzaElement.ProtoReflect.Descriptor instead.
func (*XmppStanzaElement) Descriptor() ([]byte, []int) {
	return file_wa_extra_proto_rawDescGZIP(), []int{3}
}

func (x *XmppStanzaElement) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *XmppStanzaElement) GetAttributes() []*XmppAttribute {
	if x != nil {
		return x.Attributes
	}
	return nil
}

func (x *XmppStanzaElement) GetChildren() []*XmppStanzaElement {
	if x != nil {
		return x.Children
	}
	return nil
}

func (x *XmppStanzaElement) GetValue() *XmppValue {
	if x != nil {
		return x.Value
	}
	return nil
}

var File_wa_extra_proto protoreflect.FileDescriptor

var file_wa_extra_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x77, 0x61, 0x5f, 0x65, 0x78, 0x74, 0x72, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0x44, 0x0a, 0x09, 0x58, 0x6d, 0x70, 0x70, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x18, 0x0a,
	0x06, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x06, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x14, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x42, 0x07, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x99, 0x07, 0x0a, 0x12, 0x58, 0x6d, 0x70, 0x70, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x18, 0x0a,
	0x06, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x06, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x14, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x22, 0x0a,
	0x0b, 0x57, 0x41, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x4a, 0x49, 0x44, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x57, 0x41, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x4a, 0x49,
	0x44, 0x12, 0x2a, 0x0a, 0x0f, 0x57, 0x41, 0x43, 0x61, 0x6c, 0x6c, 0x44, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x4a, 0x49, 0x44, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0f, 0x57, 0x41,
	0x43, 0x61, 0x6c, 0x6c, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x4a, 0x49, 0x44, 0x12, 0x2a, 0x0a,
	0x0f, 0x57, 0x41, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x4a, 0x49, 0x44,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0f, 0x57, 0x41, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x4a, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x09, 0x57, 0x41, 0x43,
	0x68, 0x61, 0x74, 0x4a, 0x49, 0x44, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x09,
	0x57, 0x41, 0x43, 0x68, 0x61, 0x74, 0x4a, 0x49, 0x44, 0x12, 0x28, 0x0a, 0x0e, 0x57, 0x41, 0x42,
	0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x4a, 0x49, 0x44, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x0e, 0x57, 0x41, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74,
	0x4a, 0x49, 0x44, 0x12, 0x2a, 0x0a, 0x0f, 0x57, 0x41, 0x4e, 0x65, 0x77, 0x73, 0x6c, 0x65, 0x74,
	0x74, 0x65, 0x72, 0x4a, 0x49, 0x44, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0f,
	0x57, 0x41, 0x4e, 0x65, 0x77, 0x73, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x4a, 0x49, 0x44, 0x12,
	0x20, 0x0a, 0x0a, 0x57, 0x41, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4a, 0x49, 0x44, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0a, 0x57, 0x41, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4a, 0x49,
	0x44, 0x12, 0x1e, 0x0a, 0x09, 0x57, 0x41, 0x55, 0x73, 0x65, 0x72, 0x4a, 0x49, 0x44, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x09, 0x57, 0x41, 0x55, 0x73, 0x65, 0x72, 0x4a, 0x49,
	0x44, 0x12, 0x34, 0x0a, 0x14, 0x57, 0x41, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x4a, 0x49, 0x44, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x14, 0x57, 0x41, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x55, 0x73, 0x65, 0x72, 0x4a, 0x49, 0x44, 0x12, 0x24, 0x0a, 0x0c, 0x57, 0x41, 0x4c, 0x49, 0x44,
	0x55, 0x73, 0x65, 0x72, 0x4a, 0x49, 0x44, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x0c, 0x57, 0x41, 0x4c, 0x49, 0x44, 0x55, 0x73, 0x65, 0x72, 0x4a, 0x49, 0x44, 0x12, 0x32, 0x0a,
	0x13, 0x57, 0x41, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x4a, 0x49, 0x44, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x13, 0x57, 0x41,
	0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4a, 0x49,
	0x44, 0x12, 0x40, 0x0a, 0x1a, 0x57, 0x41, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x55, 0x6e, 0x69,
	0x71, 0x75, 0x65, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x4a, 0x49, 0x44, 0x18,
	0x16, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x1a, 0x57, 0x41, 0x53, 0x69, 0x67, 0x6e, 0x61,
	0x6c, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74,
	0x4a, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0b, 0x57, 0x41, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4a,
	0x49, 0x44, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x57, 0x41, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x4a, 0x49, 0x44, 0x12, 0x38, 0x0a, 0x16, 0x57, 0x41, 0x50, 0x68, 0x6f,
	0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4a, 0x49,
	0x44, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x16, 0x57, 0x41, 0x50, 0x68, 0x6f,
	0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4a, 0x49,
	0x44, 0x12, 0x28, 0x0a, 0x0e, 0x57, 0x41, 0x4c, 0x49, 0x44, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x4a, 0x49, 0x44, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0e, 0x57, 0x41, 0x4c,
	0x49, 0x44, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4a, 0x49, 0x44, 0x12, 0x26, 0x0a, 0x0d, 0x57,
	0x41, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4a, 0x49, 0x44, 0x18, 0x1a, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x0d, 0x57, 0x41, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x4a, 0x49, 0x44, 0x12, 0x3c, 0x0a, 0x18, 0x57, 0x41, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4a, 0x49, 0x44, 0x18,
	0x1b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x18, 0x57, 0x41, 0x50, 0x68, 0x6f, 0x6e, 0x65,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4a, 0x49,
	0x44, 0x12, 0x2c, 0x0a, 0x10, 0x57, 0x41, 0x4c, 0x49, 0x44, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x4a, 0x49, 0x44, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x10, 0x57,
	0x41, 0x4c, 0x49, 0x44, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4a, 0x49, 0x44, 0x12,
	0x28, 0x0a, 0x0e, 0x57, 0x41, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x61, 0x6c, 0x6c, 0x4a, 0x49,
	0x44, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0e, 0x57, 0x41, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x43, 0x61, 0x6c, 0x6c, 0x4a, 0x49, 0x44, 0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x22, 0x4c, 0x0a, 0x0d, 0x58, 0x6d, 0x70, 0x70, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x29, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x02, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x58, 0x6d, 0x70, 0x70, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x22, 0xa9, 0x01, 0x0a, 0x11, 0x58, 0x6d, 0x70, 0x70, 0x53, 0x74, 0x61, 0x6e, 0x7a, 0x61, 0x45,
	0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x02, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x0a, 0x61, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x58, 0x6d, 0x70, 0x70, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x0a,
	0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x2e, 0x0a, 0x08, 0x63, 0x68,
	0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x58,
	0x6d, 0x70, 0x70, 0x53, 0x74, 0x61, 0x6e, 0x7a, 0x61, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x08, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x12, 0x20, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x58, 0x6d, 0x70, 0x70,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x32, 0x43, 0x0a, 0x0a,
	0x58, 0x6d, 0x70, 0x70, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x35, 0x0a, 0x07, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x12, 0x12, 0x2e, 0x58, 0x6d, 0x70, 0x70, 0x53, 0x74, 0x61, 0x6e,
	0x7a, 0x61, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x1a, 0x12, 0x2e, 0x58, 0x6d, 0x70, 0x70,
	0x53, 0x74, 0x61, 0x6e, 0x7a, 0x61, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x28, 0x01, 0x30,
	0x01, 0x42, 0x1a, 0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x2e, 0x77, 0x68, 0x61, 0x74, 0x73, 0x61, 0x70,
	0x70, 0x48, 0x03, 0x50, 0x01, 0x5a, 0x06, 0x2e, 0x3b, 0x6d, 0x61, 0x69, 0x6e,
}

var (
	file_wa_extra_proto_rawDescOnce sync.Once
	file_wa_extra_proto_rawDescData = file_wa_extra_proto_rawDesc
)

func file_wa_extra_proto_rawDescGZIP() []byte {
	file_wa_extra_proto_rawDescOnce.Do(func() {
		file_wa_extra_proto_rawDescData = protoimpl.X.CompressGZIP(file_wa_extra_proto_rawDescData)
	})
	return file_wa_extra_proto_rawDescData
}

var file_wa_extra_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_wa_extra_proto_goTypes = []interface{}{
	(*XmppValue)(nil),          // 0: XmppValue
	(*XmppAttributeValue)(nil), // 1: XmppAttributeValue
	(*XmppAttribute)(nil),      // 2: XmppAttribute
	(*XmppStanzaElement)(nil),  // 3: XmppStanzaElement
}
var file_wa_extra_proto_depIdxs = []int32{
	1, // 0: XmppAttribute.value:type_name -> XmppAttributeValue
	2, // 1: XmppStanzaElement.attributes:type_name -> XmppAttribute
	3, // 2: XmppStanzaElement.children:type_name -> XmppStanzaElement
	0, // 3: XmppStanzaElement.value:type_name -> XmppValue
	3, // 4: XmppStream.connect:input_type -> XmppStanzaElement
	3, // 5: XmppStream.connect:output_type -> XmppStanzaElement
	5, // [5:6] is the sub-list for method output_type
	4, // [4:5] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_wa_extra_proto_init() }
func file_wa_extra_proto_init() {
	if File_wa_extra_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_wa_extra_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*XmppValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wa_extra_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*XmppAttributeValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wa_extra_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*XmppAttribute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wa_extra_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*XmppStanzaElement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_wa_extra_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*XmppValue_String_)(nil),
		(*XmppValue_Data)(nil),
	}
	file_wa_extra_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*XmppAttributeValue_String_)(nil),
		(*XmppAttributeValue_Data)(nil),
		(*XmppAttributeValue_WADomainJID)(nil),
		(*XmppAttributeValue_WACallDomainJID)(nil),
		(*XmppAttributeValue_WAIdentifierJID)(nil),
		(*XmppAttributeValue_WAChatJID)(nil),
		(*XmppAttributeValue_WABroadcastJID)(nil),
		(*XmppAttributeValue_WANewsletterJID)(nil),
		(*XmppAttributeValue_WAGroupJID)(nil),
		(*XmppAttributeValue_WAUserJID)(nil),
		(*XmppAttributeValue_WAPhoneNumberUserJID)(nil),
		(*XmppAttributeValue_WALIDUserJID)(nil),
		(*XmppAttributeValue_WAIncomingStatusJID)(nil),
		(*XmppAttributeValue_WASignalUniqueBroadcastJID)(nil),
		(*XmppAttributeValue_WADeviceJID)(nil),
		(*XmppAttributeValue_WAPhoneNumberDeviceJID)(nil),
		(*XmppAttributeValue_WALIDDeviceJID)(nil),
		(*XmppAttributeValue_WALocationJID)(nil),
		(*XmppAttributeValue_WAPhoneNumberLocationJID)(nil),
		(*XmppAttributeValue_WALIDLocationJID)(nil),
		(*XmppAttributeValue_WAGroupCallJID)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_wa_extra_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_wa_extra_proto_goTypes,
		DependencyIndexes: file_wa_extra_proto_depIdxs,
		MessageInfos:      file_wa_extra_proto_msgTypes,
	}.Build()
	File_wa_extra_proto = out.File
	file_wa_extra_proto_rawDesc = nil
	file_wa_extra_proto_goTypes = nil
	file_wa_extra_proto_depIdxs = nil
}
